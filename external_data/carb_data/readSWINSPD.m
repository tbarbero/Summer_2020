function out = readSWINSPD(filename, dataLines)
%IMPORTFILE Import data from a text file
%  SWINSPD20202 = IMPORTFILE(FILENAME) reads data from text file
%  FILENAME for the default selection.  Returns the data as a table.
%
%  SWINSPD20202 = IMPORTFILE(FILE, DATALINES) reads data for the
%  specified row interval(s) of text file FILENAME. Specify DATALINES as
%  a positive scalar integer or a N-by-2 array of positive scalar
%  integers for dis-contiguous row intervals.
%
%  Example:
%  SWINSPD20202 = importfile("SWINSPD_2020-2.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 05-Jun-2020 14:06:26

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Setup the Import Options
opts = delimitedTextImportOptions("NumVariables", 12);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["site", "date", "start_hour", "windstring", ...
    "variable", "units", "quality", "prelim", "met_source", ...
    "obs_type", "minutes", "name"];
opts.VariableTypes = ["double", "datetime", "double", "string", ...
    "categorical", "categorical", "double", "categorical", ...
    "categorical", "categorical", "double", "categorical"];
opts = setvaropts(opts, 2, "InputFormat", "yyyy-MM-dd");
opts = setvaropts(opts, 4, "WhitespaceRule", "preserve");
opts = setvaropts(opts, [4, 5, 6, 8, 9, 10, 12], "EmptyFieldRule", "auto");
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
out = readtable(filename, opts);

% generate u & v windsout.s
u = NaN(numel(out.windstring),1);
v = NaN(numel(out.windstring),1);
for i = 1:numel(out.windstring)
    if ~isnan(out.start_hour(i))
        tmp = out.windstring{i}; % dir/wspd 360/0.52
        j = find(tmp=='/');
        dir = str2double(tmp(1:j-1));
        U = str2double(tmp(j+1:end));
        if ~isnan(U) && isnan(dir); dir = 0; end
        dir = 270 - dir; % convert to "math" wind direction
        dir(dir<0) = dir(dir<0) + 360;
        u(i) = U*cosd(dir);
        v(i) = U*sind(dir); 
        U(i) = U;
    end
end
out.u = u;
out.v = v;


end